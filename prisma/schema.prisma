generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hotel {
  id          String    @id @default(cuid())
  name        String
  description String?
  address     String
  city        String
  state       String?
  country     String
  zipCode     String?
  rooms       Room[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("hotels")
}

model Room {
  id          String    @id @default(cuid())
  hotelId     String
  name        String
  description String?
  capacity    Int
  price       Float
  amenities   String[]
  photos      String[]
  bookings    Booking[]
  hotel       Hotel     @relation(fields: [hotelId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("rooms")
}

model Booking {
  id         String         @id @default(cuid())
  userId     String
  roomId     String
  startDate  DateTime
  endDate    DateTime
  status     BookingStatus
  totalPrice Float
  user       User           @relation(fields: [userId], references: [id])
  room       Room           @relation(fields: [roomId], references: [id])
  payment    Payment[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@map("bookings")
}

model Payment {
  id         String        @id @default(cuid())
  bookingId  String
  amount     Float
  status     PaymentStatus
  booking    Booking       @relation(fields: [bookingId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("payments")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id            String        @id @default(cuid())
  name          String?
  bio           String?
  email         String        @unique
  walletAddress String?       @unique
  publicEmail   Boolean?
  salt          String?
  password      String?
  emailVerified DateTime?
  image         String?
  isOnboarded   Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  streetAddress String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  currency      String?
  bookings      Booking[]
  socialLink    SocialLink?
  accounts      Account[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model SocialLink {
  id           String   @id @default(cuid())
  instagramUrl String?
  twitterUrl   String?
  githubUrl    String?
  discordUrl   String?
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("social_links")
}

model NewsletterEmails {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  isNotified Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@map("newsletter_emails")
}
